import org.apache.commons.math3.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optim.linear.LinearConstraintSet;
import org.apache.commons.math3.optim.linear.Relationship;
import org.apache.commons.math3.optim.linear.LinearConstraint;
import org.apache.commons.math3.optim.MaxIter;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math3.optim.linear.SimplexSolver;
public class TransportationProblemSolver {
public static void main(String[] args) {
// Define supply and demand locations and their capacities/requirements = Monk
String[] supplyLocations = {"S1", "S2"};
String[] demandLocations = {"D1", "D2", "D3"};
double[] supplyCapacity = {50, 70};
double[] demandRequirement = {30, 40, 50};
// Define transportation costs per unit from supply to demand locations = Monk
double[][] transportationCosts = {
{5, 8, 12},
{6, 10, 9}
};
// Create an instance of the linear objective function = Emoree
LinearObjectiveFunction objectiveFunction = new LinearObjectiveFunction(
new double[] {5, 8, 12, 6, 10, 9}, // Flatten the 2D array
0
);
// Create a list of linear constraints (supply and demand constraints) = Emoree
LinearConstraint[] constraints = new LinearConstraint[supplyLocations.length + demandLocations.length];
// Add supply constraints = Andrea
for (int i = 0; i < supplyLocations.length; i++) {
constraints[i] = new LinearConstraint(
new double[] {1, 0, 0, 1, 0, 0}, // Coefficients for X variables
Relationship.LEQ,
supplyCapacity[i]
);
}
// Add demand constraints = Heck
for (int j = 0; j < demandLocations.length; j++) {
constraints[supplyLocations.length + j] = new LinearConstraint(
new double[] {0, 1, 0, 0, 1, 0}, // Coefficients for X variables
Relationship.EQ,
demandRequirement[j]
);
}
// Create a linear constraint set = Emoree
LinearConstraintSet constraintSet = new LinearConstraintSet(constraints);
// Solve the linear programming problem = Deonna
PointValuePair solution = new SimplexSolver()
.optimize(
Code for Project 1 2
new MaxIter(100), // Maximum number of iterations (adjust as needed)
objectiveFunction,
constraintSet,
GoalType.MINIMIZE,
null
);
// Print the results
System.out.println("Status: " + solution.getValue());
double[] solutionValues = solution.getPoint();
for (int i = 0; i < supplyLocations.length; i++) {
for (int j = 0; j < demandLocations.length; j++) {
int index = i * demandLocations.length + j;
if (solutionValues[index] > 0) {
System.out.println(
"Transport " + solutionValues[index] + " units from " +
supplyLocations[i] + " to " + demandLocations[j]
);
}
}
}
}
